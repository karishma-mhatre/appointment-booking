{"version":3,"sources":["Components/Header/Header.js","Components/ImageUpload/ImageUpload.js","Components/AppointmentForm/AppointmentForm.js","Components/PatientInfoForm/PatientInfoForm.js","Components/AppointmentBooking/AppointmentBooking.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","worker","TesseractWorker","ImageUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","imageFiles","target","files","filesLength","length","_loop","reader","FileReader","file","i","onloadend","getDataFromImage","setState","uploadedImage","result","doOCR","readAsDataURL","recognize","state","progress","isLoading","console","log","then","dataFromOCR","setImage","imageName","removeImage","_this2","Fragment","accept","style","display","id","type","capture","onChange","value","htmlFor","Button","variant","component","src","alt","CircularProgress","onClick","Avatar","React","Component","AppointmentForm","getLocation","position","setTimeout","window","google","maps","Geocoder","geoCoder","latlng","lat","parseFloat","coords","latitude","lng","longitude","geocode","location","results","status","setLocation","navigator","geolocation","getCurrentPosition","Container","maxWidth","TextField","required","label","margin","fullWidth","defaultValue","clinicLocation","handleAppointmentInfo","InputLabelProps","shrink","Select","name","exam","inputProps","MenuItem","appointmentDate","time","rowsMax","notes","Components_ImageUpload_ImageUpload","react_router_dom","to","color","AppointmentBooking","firstName","handlePatientInfo","lastName","dateOfBirth","setAppointment","image","datafromOCR","appointmentInfo","objectSpread","patientInfo","moment","format","appointmentTime","doctorsOrderImage","patientIdImage","react_router","exact","path","render","Components_AppointmentForm_AppointmentForm","assign","PatientInfoForm","App","Components_Header_Header","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5500a1b6.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss'\n\nconst Header = () => {\n    return (\n        <div className=\"container header\">\n            <div className=\"logo\">PENINSULA DIAGNOSTIC IMAGING</div>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport { TesseractWorker } from 'tesseract.js';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './image-upload.scss';\n\nconst worker = new TesseractWorker();\n\nclass ImageUpload extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            uploadedImage: \"\",\n            imageName: \"\",\n            dataFromOCR: \"\",\n            isLoading: false\n        }\n    }\n\n    handleChange = (e) => {\n\n        const imageFiles = e.target.files;\n        const filesLength = imageFiles.length;\n\n        for(var i = 0; i < filesLength; i++) {\n            let reader = new FileReader();\n            let file = imageFiles[i];\n\n            reader.onloadend = () => {\n                if(this.props.getDataFromImage) {\n                    this.setState({ uploadedImage: reader.result }, () => {this.doOCR()});\n                }else {\n                    this.setState({ uploadedImage: reader.result });\n                }\n            }\n\n            reader.readAsDataURL(file);\n        }\n    }\n\n    doOCR = () => {\n        worker.recognize(this.state.uploadedImage)\n            .progress(progress => {\n                this.setState({isLoading: true});\n                console.log('progress', progress);\n            }).then(result => {\n                this.setState({dataFromOCR: result}, () => {\n                    this.setState({isLoading: false});\n                    console.log(this.state.dataFromOCR);\n                    this.props.setImage(this.props.imageName, this.state.uploadedImage, this.state.dataFromOCR);\n                })\n            });\n    }\n\n    removeImage = () => {\n         this.setState({ uploadedImage: null });\n         this.props.setImage(this.props.imageName, null);\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"container image-selector\">\n                    <div>\n                        <input\n                            accept=\"image/*\"\n                            style={{ display: 'none' }}\n                            id=\"file\"\n                            type=\"file\"\n                            capture=\"user\"\n                            onChange={(e) => { this.handleChange(e) }}\n                            value={this.state.imageName}\n                        />\n                        <label htmlFor=\"file\">\n                            <Button variant=\"outlined\" component=\"span\" className=\"image-selector-btn\">\n                                <i className=\"fa fa-camera\"></i>\n                            </Button>\n                        </label>\n                    </div>\n                    <div>\n                        <input\n                            accept=\"image/*\"\n                            style={{ display: 'none' }}\n                            id=\"file\"\n                            type=\"file\"\n                            onChange={(e) => { this.handleChange(e) }}\n                            value={this.state.imageName}\n                        />\n                        <label htmlFor=\"file\">\n                            <Button variant=\"outlined\" component=\"span\" className=\"image-selector-btn\">\n                                <i className=\"fa fa-folder\"></i>\n                            </Button>\n                        </label>\n                    </div>\n                </div>\n                {\n                    this.state.uploadedImage &&\n                    <div className=\"selected-image\">\n                        <img src={this.state.uploadedImage} alt=\"imagerrr\"></img>\n\n                    </div>\n                }\n                {\n                    this.state.isLoading &&\n                    <div className=\"ocr-progress\">\n                        <span>Getting data from image...</span>\n                        <CircularProgress></CircularProgress>\n                    </div>\n                }\n\n                {\n                    this.state.uploadedImage &&\n                    <Button onClick={(e) => { this.removeImage(e) }}>\n                        <Avatar>\n                            X\n                        </Avatar>\n                    </Button>\n                }\n            </>\n            \n        )\n    }\n}\n\nexport default ImageUpload;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Container from '@material-ui/core/Container';\nimport ImageUpload from '../ImageUpload/ImageUpload';\nimport { Link } from \"react-router-dom\";\n\nclass AppointmentForm extends React.Component {\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            let coords = navigator.geolocation.getCurrentPosition(this.getLocation);\n          }\n    }\n\n    getLocation = (position) => {\n        //GeoLocation daily limit is 1 for non billing account. Hence call fails second time onwards.\n        setTimeout(() => {\n            if(window.google.maps.Geocoder) {\n                let geoCoder = new window.google.maps.Geocoder();\n                let latlng = {lat: parseFloat(position.coords.latitude), lng: parseFloat(position.coords.longitude)}\n                geoCoder.geocode({'location': latlng}, (results, status) => {\n                    if(status === 'OK'){\n                        this.props.setLocation(results[3]);\n                    }\n                })\n            }\n        }, 1000)\n    }\n\n    render() {\n        return (\n            <Container maxWidth=\"sm\">\n                <div className=\"form-title\">REQUEST AN APPOINTMENT</div>\n                    <form>\n                        <div className=\"input-container\">\n                            <TextField\n                                required\n                                id=\"location\"\n                                label=\"Clinic Location\"\n                                margin=\"normal\"\n                                fullWidth={true}\n                                defaultValue={this.props.clinicLocation}\n                                onChange={(e) => { this.props.handleAppointmentInfo(e, \"clinicLocation\")}}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                        <div className=\"input-container\">\n                            <Select\n                                required\n                                name=\"exam\"\n                                value={this.props.exam}\n                                fullWidth={true}\n                                inputProps={{\n                                    name: 'age',\n                                    id: 'age-simple',\n                                }}\n                                onChange={(e) => { this.props.handleAppointmentInfo(e, \"exam\")}}\n                            >\n                                <MenuItem value=\"MRI\">MRI</MenuItem>\n                                <MenuItem value=\"Blood Test\">Blood Test</MenuItem>\n                                <MenuItem value=\"X-Ray\">X-Ray</MenuItem>\n                            </Select>\n                        </div>\n                        <div className=\"input-container\">\n                            <TextField\n                                required\n                                id=\"date\"\n                                label=\"Date\"\n                                type=\"date\"\n                                fullWidth={true}\n                                defaultValue={this.props.appointmentDate}\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onChange={(e) => { this.props.handleAppointmentInfo(e, \"appointmentDate\") }}\n                            />\n                        </div>\n                        <div className=\"input-container\">\n                            <TextField\n                                required\n                                id=\"time\"\n                                label=\"Time\"\n                                type=\"time\"\n                                fullWidth={true}\n                                margin=\"normal\"\n                                defaultValue={this.props.time}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onChange={(e) => { this.props.handleAppointmentInfo(e, \"appointmentTime\")}}\n                            />\n                        </div>\n                        <div className=\"input-container\">\n                            <TextField\n                                required\n                                id=\"notes\"\n                                label=\"Notes\"\n                                rowsMax=\"4\"\n                                fullWidth={true}\n                                defaultValue={this.props.notes}\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onChange={(e) => { this.props.handleAppointmentInfo(e, \"notes\")}}\n                            />\n                        </div>\n                        <div className=\"input-container\">\n                            <div className=\"image-selector-label\">Do you have any doctors order?</div>\n                            <ImageUpload setImage={this.props.setImage} imageName=\"doctorsOrderImage\" getDataFromImage={false}></ImageUpload>\n                        </div>\n                        <div className=\"btn-container\">\n                            <Link to=\"/appointment-booking/patient-info\">\n                                <Button variant=\"contained\" color=\"primary\">\n                                    Next\n                                </Button>\n                            </Link>\n                        </div>\n                    </form>\n            </Container>\n        )\n    }\n}\n\nexport default AppointmentForm;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ImageUpload from '../ImageUpload/ImageUpload';\nimport Container from '@material-ui/core/Container';\n\nclass AppointmentBooking extends React.Component {\n\n    render() {\n        return (\n            <Container maxWidth=\"sm\">\n                <div className=\"form-title\">FILL IN PATIENT DETAILS</div>\n                <form>\n                    <div className=\"input-container\">\n                        <div className=\"image-selector-label\"> Send us an ID</div>\n                        <ImageUpload setImage={this.props.setImage} imageName=\"patientIdImage\" getDataFromImage={true}></ImageUpload>\n                    </div>\n                    <div className=\"input-container\">\n                        <TextField\n                            required\n                            defaultValue={this.props.firstName}\n                            id=\"standard-name\"\n                            label=\"Firstname\"\n                            margin=\"normal\"\n                            fullWidth={true}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={(e) => { this.props.handlePatientInfo(e, \"firstName\") }}\n                        />\n                    </div>\n                    <div className=\"input-container\">\n                        <TextField\n                            required\n                            defaultValue={this.props.lastName}\n                            id=\"standard-name\"\n                            label=\"Lastname\"\n                            margin=\"normal\"\n                            fullWidth={true}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={(e) => { this.props.handlePatientInfo(e, \"lastName\") }}\n                        />\n                    </div>\n                    <div className=\"input-container\">\n                        <TextField\n                            required\n                            defaultValue={this.props.dateOfBirth}\n                            id=\"standard-name\"\n                            label=\"Date of birth\"\n                            type=\"date\"\n                            fullWidth={true}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={(e) => { this.props.handlePatientInfo(e, \"dateOfBirth\") }}\n                        />\n                    </div>\n                    <div className=\"btn-container\">\n                        <Button variant=\"contained\" color=\"primary\" onClick={(e) => {this.props.setAppointment(e)}}>\n                            Request Appointment\n                        </Button>\n                    </div>\n                </form>\n            </Container>\n        )\n    }\n}\n\nexport default AppointmentBooking;","import React from 'react';\nimport AppointmentForm from '../AppointmentForm/AppointmentForm';\nimport PatientInfoForm from '../PatientInfoForm/PatientInfoForm';\nimport './appointmentBooking.scss';\nimport * as moment from 'moment';\nimport { Route } from 'react-router-dom';\n\nclass AppointmentBooking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appointmentInfo: {\n                clinicLocation: \"\",\n                exam: \"MRI\",\n                appointmentDate: moment().format('YYYY-MM-DD'),\n                appointmentTime: \"\",\n                notes: \"\",\n                doctorsOrderImage: null\n            },\n            patientInfo: {\n                patientIdImage: \"\",\n                firstName:\"\",\n                lastName :\"\",\n                dateOfBirth:\"\"\n            }\n        }\n    }\n\n    setImage = (imageName, image, datafromOCR) => {\n        switch(imageName){\n            case \"doctorsOrderImage\":\n                    let appointmentInfo = {...this.state.appointmentInfo}\n                    appointmentInfo[imageName] = image;\n                    this.setState({appointmentInfo})\n            break;\n            case \"patientIdImage\":\n                    let patientInfo = {...this.state.patientInfo}\n                    patientInfo[imageName] = image;\n                    this.setState({patientInfo})\n            break;\n            default: \n            break;\n        }\n    }\n\n    handleAppointmentInfo = (e, name) => {\n        let appointmentInfo = {...this.state.appointmentInfo}\n        appointmentInfo[name] = e.target.value;\n\n        this.setState({appointmentInfo})\n    }\n\n    setLocation = (location) => {\n        let patientInfo = {...this.state.patientInfo}\n        patientInfo[\"clinicLocation\"] = location;\n        this.setState({patientInfo})\n    }\n\n    handlePatientInfo = (e, name) => {\n        let patientInfo = {...this.state.patientInfo}\n        patientInfo[name] = e.target.value;\n        this.setState({patientInfo})\n    }\n\n    setAppointment = () => {\n        console.log(\"send request to backend along with data\")\n    }\n\n    render() {\n        \n        return (\n            <div className=\"container\">\n                <Route exact path=\"/appointment-booking/\" render={\n                    (props) => (\n                        <AppointmentForm {...props} {...this.state.appointmentInfo} \n                        handleAppointmentInfo={this.handleAppointmentInfo} \n                        setImage={this.setImage} \n                        setLocation={this.setLocation}></AppointmentForm>\n                    )\n                }/>\n                <Route exact path=\"/appointment-booking/patient-info\" render={\n                    (props) => (\n                        <PatientInfoForm {...props} {...this.state.patientInfo} \n                        handlePatientInfo={this.handlePatientInfo} \n                        setImage={this.setImage}\n                        setAppointment={this.setAppointment}></PatientInfoForm>\n                    )\n                }/>\n            </div>\n        )\n    }\n}\n\nexport default AppointmentBooking;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './styles/common.scss';\nimport AppointmentBooking from './Components/AppointmentBooking/AppointmentBooking';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header></Header>\n        <Route path=\"/\" component={AppointmentBooking}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}